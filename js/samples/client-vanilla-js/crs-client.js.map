{"version":3,"sources":["webpack://crsClient/webpack/universalModuleDefinition","webpack://crsClient/webpack/bootstrap","webpack://crsClient/./src/MetadataOptions.ts","webpack://crsClient/./src/AmbientValuesProvider.ts","webpack://crsClient/./src/Command.ts","webpack://crsClient/./src/CommandEmitter.ts","webpack://crsClient/./src/ResponseType.ts","webpack://crsClient/external {\"commonjs\":\"axios\",\"commonjs2\":\"axios\",\"amd\":\"axios\",\"root\":\"axios\"}","webpack://crsClient/./src/MetadataService.ts","webpack://crsClient/./src/index.ts","webpack://crsClient/./src/CrsEndpoint.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__5__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","MetadataPath","defaultMetadataOptions","showAmbientValues","showCommands","AmbientValuesProvider","values","this","_values","setValues","merge","obj","__assign","readMetadata","command","meta","constructor","CommandMetadataSym","Error","Command","events","_i","arguments","length","target","readCommandName","Command_1","ResponseType_1","CommandEmitter","crsEndpoint","axiosInstance","metadataService","ambientValuesProvider","responseReceivers","findCallerId","callerId","undefined","cr","getCallerId","Date","getTime","toString","sendCommand","_this","commandName","commandPayload","console","debug","postCommand","then","response","Promise","resolve","receiver","x","processCommandResponse","responseType","ResponseType","Synchronous","Meta","commandId","payload","Asynchronous","ValidationError","error","InternalErrorResponseType","commandUrl","currentMetadataPromise","metadata","query","_a","callerIdPropertyName","post","str","push","encodeURIComponent","join","serializeQueryParams","resp","data","axios_1","__importDefault","MetadataOptions_1","MetadataService","axios","options","reloadMetadata","cts","cancel","default","CancelToken","source","fetchMetadata","token","ambientValues","cancelToken","url","__export","MetadataService_1","CommandEmitter_1","AmbientValuesProvider_1","CrsEndpoint","config","metadataOptions","commandEmitter","send","internalReloadMetadata","getMetadata","initialize","metadataPromise","receiverPromises","all","_"],"mappings":"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","file":"crs-client.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"axios\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"axios\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"crsClient\"] = factory(require(\"axios\"));\n\telse\n\t\troot[\"crsClient\"] = factory(root[\"axios\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__5__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","/**\r\n * The path to the metadata endpoint, appended to the CRS endpoint URL.\r\n */\r\nexport const MetadataPath = \"__meta\";\r\n\r\nexport interface MetadataOptions {\r\n    /**\r\n     * If true, the command list will be included in the received metadata.\r\n     * Defaults to true.\r\n     */\r\n    showCommands?: boolean;\r\n\r\n    /**\r\n     * If true, the ambient values will be included in the received metadata.\r\n     * Defaults to true.\r\n     */\r\n    showAmbientValues?: boolean;\r\n}\r\n\r\nexport const defaultMetadataOptions: MetadataOptions = {\r\n    showAmbientValues: true,\r\n    showCommands: true\r\n};\r\n","export class AmbientValuesProvider {\r\n    private _values: any;\r\n    get values() {\r\n        return this._values;\r\n    } \r\n\r\n    constructor(values?: any) {\r\n        this._values = values;\r\n    }\r\n    \r\n    setValues(values: any) {\r\n        this._values = values;\r\n    }\r\n\r\n    merge(obj: any): any {\r\n        return {...obj, ...this.values};\r\n    }\r\n}\r\n","export const CommandMetadataSym = Symbol('CrsCommandMetadata');\r\n\r\nexport interface CommandObjectMetadata {\r\n    name: string;\r\n    events: string[];\r\n}\r\n\r\n/**\r\n * The command decorator let you bind a command class with a command name.\r\n * You can also provides a list of events on wich the emitter will subscirbe on \r\n * @param name The command name\r\n * @param events Any events that the command will trigger during its execution.  \r\n */\r\nexport function Command(name: string, ...events: string[]) {\r\n    return function(target: any) {\r\n        target[CommandMetadataSym] = {name, events};\r\n        return target;\r\n    }\r\n}\r\n\r\nexport function readMetadata(command: Object): CommandObjectMetadata {\r\n    const meta: CommandObjectMetadata = (<any>command.constructor)[CommandMetadataSym];\r\n    if (!meta) {\r\n        throw new Error('Could not read the command metadata. The decorator is probably missing.');\r\n    }\r\n\r\n    return meta;\r\n}\r\n\r\nexport function readCommandName(command: Object): string {\r\n    const meta = readMetadata(command);\r\n    return meta.name;\r\n}\r\n","import { AxiosInstance } from \"axios\";\r\nimport { MetadataService } from \"./MetadataService\";\r\nimport { readCommandName } from \"./Command\";\r\nimport { AmbientValuesProvider } from './AmbientValuesProvider';\r\nimport { CommandResponse } from \"./CommandResponse\";\r\nimport { ResponseReceiver } from \"./ResponseReceiver\";\r\nimport { ResponseType } from \"./ResponseType\";\r\n\r\nfunction serializeQueryParams(obj: any) {\r\n    const str = [];\r\n    for (let p in obj)\r\n        if (obj.hasOwnProperty(p)) {\r\n            str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\r\n        }\r\n\r\n    return str.join(\"&\");\r\n}\r\n\r\nexport class CommandEmitter {\r\n    public constructor(\r\n        private readonly crsEndpoint: string,\r\n        private readonly axiosInstance: AxiosInstance,\r\n        private readonly metadataService: MetadataService,\r\n        private readonly ambientValuesProvider: AmbientValuesProvider,\r\n        private readonly responseReceivers: ResponseReceiver[]\r\n    ) {}\r\n\r\n    private findCallerId(): string {\r\n        // Find a callerId from the ResponseReceivers. A date-based caller ID will be generated otherwise.\r\n        let callerId: string | undefined = undefined;\r\n        for(let i = 0; i < this.responseReceivers.length; i++) {\r\n            const cr = this.responseReceivers[i];\r\n            if(cr.getCallerId !== undefined) {\r\n                callerId = cr.getCallerId();\r\n            }\r\n            if(callerId) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(callerId) {\r\n            return callerId;\r\n        }\r\n        return new Date().getTime().toString();\r\n    }\r\n    \r\n    public sendCommand<TResult>(command: any): Promise<TResult> {\r\n        const commandName = readCommandName(command);\r\n        const commandPayload = this.ambientValuesProvider.merge(command);\r\n\r\n        console.debug(`CRS: Sending command - CommandName: ${commandName}`);\r\n\r\n        return this.postCommand<TResult>(commandName, commandPayload).then((response) => {\r\n            // If no receivers, just return the raw response\r\n            let p: Promise<CommandResponse<TResult>> = Promise.resolve(response);\r\n            // Loop on all receivers\r\n            for(let i = 0; i < this.responseReceivers.length; i++) {\r\n                const receiver = this.responseReceivers[i];\r\n                p = p.then(x => receiver.processCommandResponse(x));\r\n            }\r\n            return p.then(x => {\r\n                switch(x.responseType) {\r\n                    case ResponseType.Synchronous:\r\n                    case ResponseType.Meta:\r\n                        console.debug(`CRS: Received command response - CommandName: ${commandName}; CommandId: ${x.commandId}`);\r\n                        return x.payload;\r\n                    case ResponseType.Asynchronous: \r\n                        throw new Error(`CRS: Received a deferred command response, but no ResponseReceiver handled it. Add an async response receiver (eg. signalr). CommandName: ${commandName}; CommandId: ${x.commandId}`);\r\n                    case ResponseType.ValidationError:\r\n                        console.error(x.payload);\r\n                        throw new Error(`CRS: Received validation error. CommandName: ${commandName}; CommandId: ${x.commandId}`);\r\n                    case ResponseType.InternalErrorResponseType:\r\n                        console.error(x.payload);\r\n                        throw new Error(`CRS: Received internal error. CommandName: ${commandName}; CommandId: ${x.commandId}`);\r\n                    default:\r\n                        throw new Error(`CRS: Unknown ResponseType ${x.responseType}. CommandName: ${commandName}; CommandId: ${x.commandId}`);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private postCommand<TResult>(commandName: string, commandPayload:any): Promise<CommandResponse<TResult>> {\r\n        const commandUrl = `${this.crsEndpoint}/${commandName}`;\r\n        const callerId = this.findCallerId();\r\n\r\n        if(this.metadataService.currentMetadataPromise) {\r\n            return this.metadataService.currentMetadataPromise.then(metadata => {\r\n                const query = {\r\n                    [metadata.callerIdPropertyName]: callerId\r\n                };\r\n    \r\n                return this.axiosInstance\r\n                    .post<CommandResponse<TResult>>(`${commandUrl}?${serializeQueryParams(query)}`, commandPayload)\r\n                    .then(resp => resp.data);\r\n            });\r\n        } else {\r\n            throw new Error('CRS has not been initialized.');\r\n        }\r\n    }\r\n}\r\n","export enum ResponseType {\r\n    /**\r\n     * This is a returned when validation failed on a command (Filtering step).\r\n     */\r\n    ValidationError = 'V',\r\n    /**\r\n     * This is a returnd when an error has been raised by the execution of the command, in the command handler. (Execution step).\r\n     */\r\n    InternalErrorResponseType = 'I',\r\n    /**\r\n     * This is returned when the command has successfuly been executed in a synchronous-way, and a result is directly accessible by the client.\r\n     */\r\n    Synchronous = 'S',\r\n    /**\r\n     * This is returned when the execution of the command has been deferred by the pipeline.\r\n     */\r\n    Asynchronous = 'A',\r\n    /**\r\n     * This is returned for any meta command result.\r\n     */\r\n    Meta = 'M'\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__5__;","import { AxiosInstance, CancelTokenSource, CancelToken } from \"axios\";\r\nimport axios from \"axios\";\r\nimport { EndpointMetadataResponse, EndpointMetadata } from \"./EndpointMetadata\";\r\nimport { AmbientValuesProvider } from \"./AmbientValuesProvider\";\r\nimport { MetadataOptions, MetadataPath } from \"./MetadataOptions\";\r\n\r\nexport class MetadataService {\r\n    private cts?: CancelTokenSource;\r\n    public currentMetadataPromise?: Promise<EndpointMetadata>;\r\n\r\n    constructor(\r\n        private readonly crsEndpoint: string,\r\n        private readonly axios: AxiosInstance,\r\n        private readonly options: MetadataOptions,\r\n        private readonly ambientValuesProvider: AmbientValuesProvider\r\n        ) {\r\n    }\r\n\r\n    public reloadMetadata() {\r\n        // Cancel previous metadata request\r\n        // (This will fail any pending commands attached to the existing promise\r\n        if(this.cts !== undefined) {\r\n            this.cts.cancel();\r\n        }\r\n\r\n        // Fetch metadata and replace local promise\r\n        this.cts = axios.CancelToken.source();\r\n        this.currentMetadataPromise = this.fetchMetadata(this.cts.token).then( (r) => {\r\n            if(r.payload === undefined) {\r\n                throw new Error('CRS: Metadata response didn\\'t have a payload property');\r\n            }\r\n            this.ambientValuesProvider.setValues(r.payload.ambientValues);\r\n            console.debug('CRS: Loaded metadata');\r\n            return r.payload;\r\n        } );\r\n\r\n        return this.currentMetadataPromise;\r\n    }\r\n\r\n    private fetchMetadata(cancelToken: CancelToken): Promise<EndpointMetadataResponse> {\r\n        const url = `${this.crsEndpoint}/${MetadataPath}`;\r\n        console.debug(`CRS: Fetching medatata from ${url}`);\r\n        return this.axios.post(url, this.options, {\r\n            cancelToken: cancelToken,\r\n        }).then(resp => resp.data);\r\n    }\r\n}","/*\r\n * This file is the library entry point, and exports everything needed in the library.\r\n */\r\nexport * from './AmbientValuesProvider';\r\n\r\nexport * from './Command';\r\nexport * from './CommandEmitter';\r\nexport * from './CommandResponse';\r\n\r\nexport * from './CrsEndpoint';\r\nexport * from './CrsEndpointConfiguration';\r\n\r\nexport * from './EndpointMetadata';\r\n\r\nexport * from './MetadataOptions';\r\nexport * from './MetadataService';\r\n\r\nexport * from './ResponseReceiver';\r\nexport * from './ResponseType';\r\n","import axios from 'axios';\r\nimport { EndpointMetadata } from './EndpointMetadata';\r\nimport { MetadataService } from './MetadataService';\r\nimport { CommandEmitter } from './CommandEmitter';\r\nimport { AmbientValuesProvider } from './AmbientValuesProvider';\r\nimport { CrsEndpointConfiguration } from './CrsEndpointConfiguration';\r\nimport { ResponseReceiver } from './ResponseReceiver';\r\nimport { defaultMetadataOptions } from './MetadataOptions';\r\n\r\nexport class CrsEndpoint {\r\n    private readonly config: CrsEndpointConfiguration;\r\n    private readonly metadataService: MetadataService;\r\n    private readonly commandEmitter: CommandEmitter;\r\n    private readonly ambientValuesProvider: AmbientValuesProvider;\r\n    private readonly responseReceivers: ResponseReceiver[];\r\n\r\n    public constructor(config: CrsEndpointConfiguration) {\r\n        this.config = { ...config };\r\n\r\n        // Ensure valid configuration\r\n        if (!this.config.url) {\r\n            throw new Error('CrsEndpoint configuration does not have a valid url property');\r\n        }\r\n\r\n        if (this.config.axiosInstance === undefined) {\r\n            this.config.axiosInstance = axios;\r\n        }\r\n        if (this.config.responseReceivers === undefined) {\r\n            this.config.responseReceivers = [];\r\n        }\r\n        if (this.config.metadataOptions === undefined) {\r\n            this.config.metadataOptions = defaultMetadataOptions;\r\n        }\r\n\r\n        this.responseReceivers = this.config.responseReceivers;\r\n\r\n        this.ambientValuesProvider = new AmbientValuesProvider();\r\n        this.metadataService = new MetadataService(\r\n            this.config.url,\r\n            this.config.axiosInstance,\r\n            this.config.metadataOptions,\r\n            this.ambientValuesProvider\r\n            );\r\n        this.commandEmitter = new CommandEmitter(\r\n            this.config.url, \r\n            this.config.axiosInstance, \r\n            this.metadataService, \r\n            this.ambientValuesProvider, \r\n            this.responseReceivers\r\n            );\r\n    }\r\n\r\n    public send<TResult>(command: any): Promise<TResult> {\r\n        return this.commandEmitter.sendCommand<TResult>(command)\r\n    }\r\n\r\n    public reloadMetadata(): Promise<EndpointMetadata> {\r\n        return this.internalReloadMetadata();\r\n    }\r\n\r\n    public getMetadata(): Promise<EndpointMetadata> {\r\n        if(this.metadataService.currentMetadataPromise) {\r\n            return this.metadataService.currentMetadataPromise;\r\n        }\r\n        throw new Error('CRS has not been initialized.');\r\n    }\r\n\r\n    public initialize(): Promise<EndpointMetadata> {\r\n        console.debug('CRS: Initializing');\r\n        let metadataPromise = this.internalReloadMetadata();\r\n\r\n        const receiverPromises: Promise<any>[] = [metadataPromise];\r\n        for (let i = 0; i < this.responseReceivers.length; i++) {\r\n            const receiver = this.responseReceivers[i];\r\n            if (receiver.initialize) {\r\n                receiverPromises.push(receiver.initialize());\r\n            }\r\n        }\r\n\r\n        return Promise.all(receiverPromises).then(_ => {\r\n            console.debug('CRS: Ready');\r\n            return metadataPromise;\r\n        });\r\n    }\r\n\r\n    private internalReloadMetadata(): Promise<EndpointMetadata> {\r\n        return this.metadataService.reloadMetadata();\r\n    }\r\n}"],"sourceRoot":""}