<Project>
  <!-- Reproducible builds. See: http://blog.paranoidcoding.com/2016/04/05/deterministic-builds-in-roslyn.html
    On appveyor, the clone folder MUST be set to the solution path in the CK-World.
    This must be adapted for each solution/repository.
    -->
  <PropertyGroup Condition=" '$(CakeBuild)' == 'true' ">
    <Deterministic>true</Deterministic>
    <CKWorldPath>$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), CK-World))</CKWorldPath>
    <PathMap Condition=" '$(CKWorldPath)' != '' ">$(CKWorldPath)=C:\CK-World</PathMap>
  </PropertyGroup>
  <!--<BasicDefinitions>: provides simple and useful definitions.-->
  <PropertyGroup>
    <!-- See https://www.meziantou.net/csharp-compiler-strict-mode.htm -->
    <Features>strict</Features>
    <!-- Simple IsTestProject and IsInTestsFolder variables. -->
    <IsTestProject Condition=" '$(IsTestProject)' == '' And $(MSBuildProjectName.EndsWith('.Tests'))">true</IsTestProject>
    <IsInTestsFolder Condition="$(MSBuildProjectDirectory.Contains('\Tests\')) Or $(MSBuildProjectDirectory.Contains('/Tests/'))">true</IsInTestsFolder>
    <!-- SolutionDir is defined by Visual Studio, we unify the behavior here. -->
    <SolutionDir Condition=" '$(SolutionDir)' == '' ">$([System.IO.Path]::GetDirectoryName($(MSBuildThisFileDirectory)))/</SolutionDir>
    <!-- CakeBuild drives the standard ContinuousIntegrationBuild that is used. -->
    <ContinuousIntegrationBuild Condition=" '$(CakeBuild)' == 'true' ">true</ContinuousIntegrationBuild>
    <!-- InformationalVersion is either the Zero version or provided by the CodeCakeBuilder when in CI build). -->
    <IncludeSourceRevisionInInformationalVersion>false</IncludeSourceRevisionInInformationalVersion>
    <!-- Includes the .pdb in package. -->
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>
  <ItemGroup>
    <SourceRoot Include="$(SolutionDir)" />
  </ItemGroup>
  <!--</BasicDefinitions>-->
  <!--<StandardProperties>-->
  <PropertyGroup>
    <RepositoryUrl>https://github.com/Invenietis/crs</RepositoryUrl>
    <ProductName>CK</ProductName>
    <Company>Signature Code</Company>
    <Authors>Signature Code</Authors>
    <Copyright>Copyright Signature-Code 2007-$([System.DateTime]::UtcNow.ToString("yyyy"))</Copyright>
    <!--Removes annoying Pack warning: The package version ... uses SemVer 2.0.0 or components of SemVer 1.0.0 that are not supported on legacy clients...-->
    <NoWarn>NU5105</NoWarn>
    <!--Considering .net6 'global using' to be an opt-in (simply reproduce this with 'false' in the csproj if needed).-->
    <ImplicitUsings>disable</ImplicitUsings>
    <PackageIcon>PackageIcon.png</PackageIcon>
    <AssemblyOriginatorKeyFile>$(SolutionDir)Common/SharedKey.snk</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>
    <PublicSign Condition=" '$(OS)' != 'Windows_NT' ">true</PublicSign>
  </PropertyGroup>
  <ItemGroup>
    <None Include="$(SolutionDir)Common/PackageIcon.png" Pack="true" PackagePath="\" Visible="false" />
  </ItemGroup>
  <!--</StandardProperties>-->
  <!--<ZeroVersion>: When not building from the CI, assemblies always use the ZeroVersion (see CSemVer.InformationalVersion).-->
  <PropertyGroup Condition=" '$(ContinuousIntegrationBuild)' != 'true' ">
    <Version>0.0.0-0</Version>
    <AssemblyVersion>0.0.0</AssemblyVersion>
    <FileVersion>0.0.0.0</FileVersion>
    <InformationalVersion>0.0.0-0/0000000000000000000000000000000000000000/0001-01-01 00:00:00Z</InformationalVersion>
  </PropertyGroup>
  <!--</ZeroVersion>-->
  <!--<GenerateDocumentation>: When in IsInTestsFolder and in Release or during ContinuousIntegrationBuild builds. Each project can override GenerateDocumentationFile property. -->
  <PropertyGroup Condition=" '$(GenerateDocumentationFile)' == '' And '$(IsInTestsFolder)' != 'true' And ('$(ContinuousIntegrationBuild)' == 'true' Or '$(Configuration)' == 'Release') ">
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
  </PropertyGroup>
  <!--</GenerateDocumentation>-->

  <!--<Analyzers>: This analyzer provides very welcome guidelines about async and threading issues.-->
  <ItemGroup Condition=" '$(MSBuildProjectName)' != 'CodeCakeBuilder' ">
    <PackageReference Include="Microsoft.VisualStudio.Threading.Analyzers" Version="17.4.27" PrivateAssets="All" IncludeAssets="runtime;build;native;contentfiles;analyzers" />
  </ItemGroup>
  <!--</Analyzers>-->
  <!--<ReproducibleBuilds>-->
  <!--Enable Deterministic build. https://github.com/dotnet/reproducible-builds. SourceLink is automatically managed by this package.-->
  <ItemGroup>
    <PackageReference Include="DotNet.ReproducibleBuilds" Version="1.1.1" PrivateAssets="All" />
  </ItemGroup>
  <!--Guaranty that the build is isolated. https://github.com/dotnet/reproducible-builds#dotnetreproduciblebuildsisolated-documentation-and-nuget-package-->
  <Sdk Name="DotNet.ReproducibleBuilds.Isolated" Version="1.1.1" />
  <!--</ReproducibleBuilds>-->

  <!--<_CopyXmlDocFiles>:
    It's a mess... See  https://github.com/dotnet/sdk/issues/1458#issuecomment-695119194
    This solution works and filters out System and Microsoft packages.
    Not sure the .Net 7 solution will enable this: see https://github.com/dotnet/sdk/issues/1458#issuecomment-1265262224-->
  <Target Name="_CopyXmlDocFiles" AfterTargets="ResolveReferences" Condition=" '$(MSBuildProjectName)' != 'CodeCakeBuilder' ">
    <ItemGroup>
      <XmlDocFiles Include="@(ReferencePath-&gt;'%(RootDir)%(Directory)%(Filename).xml')" Condition="!( $([System.String]::new('%(FileName)').StartsWith('System.'))                                  Or                                  $([System.String]::new('%(FileName)').StartsWith('Microsoft.'))                                  Or                                  $([System.String]::new('%(FileName)').StartsWith('CommunityToolkit.'))                                  Or                                  '%(FileName)' == 'netstandard'                                )" />
    </ItemGroup>
    <Copy SourceFiles="@(XmlDocFiles)" Condition="Exists('%(FullPath)')" DestinationFolder="$(OutDir)" SkipUnchangedFiles="true" />
  </Target>
  <!--</_CopyXmlDocFiles>-->
</Project>