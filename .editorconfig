# Signature-Code .editorconfig
# See also: https://github.com/dotnet/roslyn/blob/master/src/Workspaces/CSharp/Portable/Formatting/CSharpFormattingOptions.cs
# 20170522
 
root = true
 
[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true
 
[*.{cs,js,ts,sql,tql}]
indent_size = 4
end_of_line = crlf
 
[*.cs]
csharp_space_between_method_call_parameter_list_parentheses = true
csharp_space_between_method_declaration_parameter_list_parentheses = true
csharp_space_after_keywords_in_control_flow_statements = false
csharp_space_between_parentheses = control_flow_statements
 
# internal and private fields should be _camelCase
dotnet_naming_rule.camel_case_for_private_internal_fields.severity = suggestion
dotnet_naming_rule.camel_case_for_private_internal_fields.symbols  = private_internal_fields
dotnet_naming_rule.camel_case_for_private_internal_fields.style    = camel_case_underscore_style
 
dotnet_naming_symbols.private_internal_fields.applicable_kinds = field
dotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal
 
dotnet_naming_style.camel_case_underscore_style.required_prefix = _
dotnet_naming_style.camel_case_underscore_style.capitalization = camel_case

# This warning is irrelevant because we almost only use managed objects.
# The dispose pattern (see here https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose) is useful only in some edge case, and most of the time a simple IDisposable implementation is enough.
# If you feel like you NEED to handle an umanaged resource, please let's talk about this first: it may well be a bad idea...
# CA1063: Implement IDisposable Correctly
dotnet_diagnostic.CA1063.severity = none

# IDE0063: Use simple 'using' statement. Most of the time, the 'not simple' using scope is better.
csharp_prefer_simple_using_statement = false:none

# CA1031: Do not catch general exception types
dotnet_diagnostic.CA1031.severity = none

# /Signature-Code .editorconfig
